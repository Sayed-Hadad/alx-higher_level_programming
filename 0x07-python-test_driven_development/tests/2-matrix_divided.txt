""" Testing matrix_divided """

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

	""" Testing normal cases """
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> matrix_divided(matrix, 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

	>>> matrix = [[0.5, 2, 3], [4, 5, 6]]
	>>> matrix_divided(matrix, 2)
	[[0.25, 1.0, 1.5], [2.0, 2.5, 3.0]]

	""" Testing invalid list """

	>>> matrix = [['a', 'b', 3], [4, 5, 6]]
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats
	
	>>> matrix = 'a string'
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix = 5
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	""" Testing unequal rows """

	>>> matrix = [[2, 3], [4, 5, 6]]
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	...
	TypeError: Each row of the matrix must have the same size

	""" Testing divisor """

	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> matrix_divided(matrix, 'a')
	Traceback (most recent call last):
	...
	TypeError: div must be a number


	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> matrix_divided(matrix, 0)
	Traceback (most recent call last):
	...
	ZeroDivisionError: division by zero


	""" Testing Return Type """

	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> type(matrix_divided(matrix, 3))
	<class 'list'>
